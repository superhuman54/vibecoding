---
description:
globs:
alwaysApply: false
---
# GitHub PR 및 이슈 관리 룰

## Pull Request (PR) 관리 규칙

### 1. PR 생성 규칙
- **제목 형식**: `[타입] 간단한 설명`
  - 타입: feat, fix, docs, style, refactor, test, chore
  - 예시: `[feat] 챗봇 인터페이스 구현`, `[fix] 에이전트 응답 오류 수정`

- **내용 포함사항**:
  - 변경 사항 요약
  - 테스트 결과
  - 관련 이슈 번호 (있는 경우)

### 2. PR 라벨 규칙
- **우선순위**: `priority/high`, `priority/medium`, `priority/low`
- **타입**: `type/feature`, `type/bugfix`, `type/enhancement`, `type/documentation`
- **상태**: `status/ready-for-review`, `status/in-progress`, `status/needs-changes`
- **크기**: `size/XS`, `size/S`, `size/M`, `size/L`, `size/XL`

### 3. PR 리뷰 규칙
- 모든 PR은 최소 1명의 리뷰어 승인 필요
- 자동 테스트 통과 필수
- 코드 스타일 가이드 준수 확인

### 4. PR 병합 규칙
- `main` 브랜치로의 병합은 Squash and merge 사용
- 브랜치 정리 자동화 (병합 후 브랜치 삭제)

## Issue 관리 규칙

### 1. 이슈 생성 규칙
- **제목 형식**: `[타입] 간단한 설명`
  - 타입: bug, feature, enhancement, question, documentation
  - 예시: `[bug] 에이전트 응답 지연 문제`, `[feature] 검색 결과 필터링 기능`

- **내용 포함사항**:
  - 문제 설명 또는 요구사항
  - 재현 단계 (버그의 경우)
  - 예상 결과 vs 실제 결과
  - 환경 정보 (필요시)

### 2. 이슈 라벨 규칙
- **타입**: `type/bug`, `type/feature`, `type/enhancement`, `type/question`, `type/documentation`
- **우선순위**: `priority/critical`, `priority/high`, `priority/medium`, `priority/low`
- **상태**: `status/triage`, `status/in-progress`, `status/blocked`, `status/ready`
- **영역**: `area/frontend`, `area/backend`, `area/agent`, `area/documentation`

### 3. 이슈 할당 규칙
- 새로운 이슈는 자동으로 프로젝트 메인테이너에게 할당
- 우선순위가 `critical` 또는 `high`인 이슈는 즉시 알림
- 각 개발자는 최대 3개의 진행 중인 이슈 할당

### 4. 이슈 해결 규칙
- 이슈 해결 시 관련 PR 링크 필수
- 테스트 결과 및 확인 사항 코멘트 추가
- 이슈 닫기 전 요청자 확인 필요

## 자동화 규칙

### 1. 자동 라벨링
- PR/이슈 제목의 `[타입]`을 기반으로 자동 라벨 적용
- 파일 변경 경로를 기반으로 영역 라벨 자동 적용

### 2. 자동 할당
- 새로운 PR/이슈는 기본 담당자에게 자동 할당
- 특정 파일 수정 시 해당 영역 담당자에게 자동 할당

### 3. 자동 코멘트
- PR 생성 시 체크리스트 자동 코멘트
- 이슈 생성 시 감사 메시지 및 처리 절차 안내
- 테스트 실패 시 실패 원인 및 수정 가이드 코멘트

### 4. 자동 리뷰
- 코드 스타일, 보안 취약점, 성능 이슈 자동 검사
- 테스트 커버리지 확인 및 보고
- 문서 업데이트 필요성 자동 검사
